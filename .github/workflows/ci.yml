name: continous integration workflow

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Test artifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Set execute permission for mvnw
        run: chmod +x mvnw

      - name: Build application
        run: ./mvnw clean install

      - name: Generate test report
        run: ./mvnw surefire-report:report

  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Set execute permission for mvnw
        run: chmod +x mvnw

      - name: Install SonarScanner
        run: npm install -g sonarqube-scanner

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw clean verify sonar:sonar -Dsonar.login=$SONAR_TOKEN

#  security:
#    name: Security Scanning
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Java
#        uses: actions/setup-java@v2
#        with:
#          java-version: 11
#
#      - name: Install OWASP Dependency-Check
#        run: |
#          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v6.3.2/dependency-check-6.3.2-release.zip -o dependency-check.zip
#          unzip dependency-check.zip -d dependency-check
#        working-directory: ${{ github.workspace }}
#
#      - name: Run OWASP Dependency-Check
#        run: ./dependency-check/bin/dependency-check.sh --scan ${{ github.workspace }}/target --format XML -f dependency-check-report.xml
#        working-directory: ${{ github.workspace }}

#  artifact:
#    name: Build Artifact
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Java
#        uses: actions/setup-java@v2
#        with:
#          java-version: 11
#
#      - name: Build application
#        run: ./mvnw clean install -DskipTests=true
#
#      - name: Archive artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: springboot-app-artifact
#          path: target/*.jar

#  deploy:
#    name: Deploy to Staging
#    runs-on: ubuntu-latest
#    needs: [build, lint, security]
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Set up Java
#        uses: actions/setup-java@v2
#        with:
#          java-version: 11
#
#      - name: Deploy to Staging Environment
#        run: ./deploy-staging.sh
#        env:
#          STAGING_SERVER: ${{ secrets.STAGING_SERVER }} # Set this in repository secrets
